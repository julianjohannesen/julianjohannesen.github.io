---
layout: post
title:      "I Had My First Technical Interview (sort of)!"
date:       2018-02-10 00:05:22 -0500
permalink:  i_got_this
---


<p>As someone new to programming, and someone who will be entering the job market sometime in the next year, one my greatest fears is that I’ll sit down for a technical interview and be given a problem that just completely, humiliatingly flummoxes me. My palms get a bit sweaty just thinking about it. Consequently, when I think about preparing for interviews, I think about the number of hours I still need to put in solving the types of problems one encounters in these interviews. Can I use binary search to find the missing element in a sorted array of integers between 1 and 100? Can I, given two sequences, use tabulation hashing to find the length of the longest sub-sequence present in both? Etc.</p>

<p>Fortunately, there are a lot of tools out there to help me. Code challenge sites like <a href="https://medium.com/r/?url=https%3A%2F%2Fwww.codewars.com%2Fdashboard" data-href="https://medium.com/r/?url=https%3A%2F%2Fwww.codewars.com%2Fdashboard" class="markup--anchor markup--p-anchor" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fwww.codewars.com%2Fdashboard" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Code Wars</a>, <a href="https://medium.com/r/?url=https%3A%2F%2Fwww.hackerrank.com%2F" data-href="https://medium.com/r/?url=https%3A%2F%2Fwww.hackerrank.com%2F" class="markup--anchor markup--p-anchor" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fwww.hackerrank.com%2F" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Hacker Rank</a>, and <a href="https://medium.com/r/?url=https%3A%2F%2Fleetcode.com%2F" data-href="https://medium.com/r/?url=https%3A%2F%2Fleetcode.com%2F" class="markup--anchor markup--p-anchor" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fleetcode.com%2F" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Leet Code</a> do a great job of helping you to hone your programming skills. And they do a pretty good job of making it fun.&nbsp;</p>

<p>But there’s another aspect of interview preparation that I think is often neglected: preparing oneself emotionally for the experience of enduring a technical interview. While there are any number of excellent books, articles and videos about how to prepare for an interview, none of them can fully prepare you emotionally for that experience: the butterflies, the clammy hands, the “oh, shit” realization that you’re about to be judged by someone you just met on your prowess as a programmer. It takes time and practice to become accustomed to those feelings and to gain the confidence that you can perform under pressure.</p>

<p>That’s where <a href="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com" data-href="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com" class="markup--anchor markup--p-anchor" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Pramp</a> comes in. The service Pramp provides is fairly simple, but hard to come by elsewhere without significant cost. Pramp pairs software developers together for live practice interviews based on their professional background, availability and practicing needs&#8202;—&#8202;for free.</p>

<p>When a fellow student in <a href="https://medium.com/r/?url=https%3A%2F%2Fwww.udacity.com%2Fgrow-with-google" data-href="https://medium.com/r/?url=https%3A%2F%2Fwww.udacity.com%2Fgrow-with-google" class="markup--anchor markup--p-anchor" rel="nofollow noopener noopener" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fwww.udacity.com%2Fgrow-with-google" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Udacity’s Grow with Google Scholarship</a> program told me about <a href="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com%2F" data-href="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com%2F" class="markup--anchor markup--p-anchor" rel="nofollow noopener noopener" data-tooltip="https://medium.com/r/?url=https%3A%2F%2Fwww.pramp.com%2F" data-tooltip-position="bottom" data-tooltip-type="link" target="_blank">Pramp</a>, I knew I had to try it out.</p>

<p>Signing up and scheduling my first interview was quick and easy. I filled out a short questionnaire about my area of study (front end) and skill level (beginner), and used the calendar tool to pick an available slot. A little while later, I received an email telling me that Pramp had paired me with a suitable interview partner.</p>

<p>The interview took place a couple of days later via video chat. My partner and I used Pramp’s realtime collaborative code editor to watch each other work. Pretty cool and something that will be familiar to people who have used Zoom, Go to Meeting, Jitsi or other video conferencing platforms.&nbsp;</p>

<p>Pramp had provided each of us a problem to present when it was our turn to take on the role of interviewer. We were also given hints and a complete solution to the problem we’d be presenting. That way, the interviewer could provide the interviewee a bit of coaching when they got stuck.</p>

<p>Neither of us had been in an actual technical interview, and we didn’t really know what we were doing. My partner was a bit more experienced than I was and I asked him if I could take on the interviewer role first, to give me time to get over some of my jitters.&nbsp;</p>

<p>The problem was pretty tough. My partner had some good ideas, but wasn’t quite able to get to a solution. I did my best to coach him, but I’d spent an hour the night before going over the problem and I hadn’t been able to solve it either.</p>

<p>I went next. By this point, I’d started to relax a bit. My problem wasn’t as tough as my partner’s, but I still wasn’t able to get to the preferred solution. My partner did his best to coach me, but I just didn’t have the background necessary. I could easily provide the brute force solution, but wasn’t able to implement the algorithm that would have satisfied the problem’s constraints.</p>

<p>The interview was about an hour long. Once it was over, Pramp popped up a questionnaire and we each provided detailed feedback about the other’s interview performance and interviewing style.</p>

<p>What I found most valuable about this experience was being put on the spot and forced to perform in front of one of my peers. It was just as nerve-wracking as it sounds. As soon as my partner’s face popped up on my screen, I began to experience all of the horribleness that afflicts so many of us, when we're put on the spot: shyness, self-doubt, performance anxiety, impostor syndrome, and all of the physical manifestations of these feelings.</p>

<p>Remembering to adhere to interview best practices when experiencing stress is tricky. Talk through the problem. State the input and output. Use pseudo-code to walk through the logic before writing any code. Focus on getting as far as you can, rather than getting to the solution. Explain your thinking. That’s great advice, but I found it very hard to follow as I wondered whether my partner was annoyed at me for wasting his time and whether I really had the chops to solve the logical and mathematical problems programmers encounter every day.&nbsp;</p>

<p>But I know that with practice I can learn to manage my emotions, to become more relaxed, and to maintain the presence of mind I’ll need to implement all of those best practices I keep reading about. That’s why I’ll be using Pramp again, and frequently.</p>
